/**
 */
package farm_cv.provider;

import farm_cv.util.Farm_cvAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Farm_cvItemProviderAdapterFactory extends Farm_cvAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Farm_cvItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link farm_cv.ImageProcessor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImageProcessorItemProvider imageProcessorItemProvider;

	/**
	 * This creates an adapter for a {@link farm_cv.ImageProcessor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImageProcessorAdapter() {
		if (imageProcessorItemProvider == null) {
			imageProcessorItemProvider = new ImageProcessorItemProvider(this);
		}

		return imageProcessorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link farm_cv.GenericAquarium} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericAquariumItemProvider genericAquariumItemProvider;

	/**
	 * This creates an adapter for a {@link farm_cv.GenericAquarium}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericAquariumAdapter() {
		if (genericAquariumItemProvider == null) {
			genericAquariumItemProvider = new GenericAquariumItemProvider(this);
		}

		return genericAquariumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link farm_cv.CameraObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CameraObjectItemProvider cameraObjectItemProvider;

	/**
	 * This creates an adapter for a {@link farm_cv.CameraObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCameraObjectAdapter() {
		if (cameraObjectItemProvider == null) {
			cameraObjectItemProvider = new CameraObjectItemProvider(this);
		}

		return cameraObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link farm_cv.AnalyzedAnimal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalyzedAnimalItemProvider analyzedAnimalItemProvider;

	/**
	 * This creates an adapter for a {@link farm_cv.AnalyzedAnimal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalyzedAnimalAdapter() {
		if (analyzedAnimalItemProvider == null) {
			analyzedAnimalItemProvider = new AnalyzedAnimalItemProvider(this);
		}

		return analyzedAnimalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link farm_cv.Fish} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FishItemProvider fishItemProvider;

	/**
	 * This creates an adapter for a {@link farm_cv.Fish}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFishAdapter() {
		if (fishItemProvider == null) {
			fishItemProvider = new FishItemProvider(this);
		}

		return fishItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link farm_cv.Cv_Controller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Cv_ControllerItemProvider cv_ControllerItemProvider;

	/**
	 * This creates an adapter for a {@link farm_cv.Cv_Controller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCv_ControllerAdapter() {
		if (cv_ControllerItemProvider == null) {
			cv_ControllerItemProvider = new Cv_ControllerItemProvider(this);
		}

		return cv_ControllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link farm_cv.OutputBuilder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputBuilderItemProvider outputBuilderItemProvider;

	/**
	 * This creates an adapter for a {@link farm_cv.OutputBuilder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputBuilderAdapter() {
		if (outputBuilderItemProvider == null) {
			outputBuilderItemProvider = new OutputBuilderItemProvider(this);
		}

		return outputBuilderItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (imageProcessorItemProvider != null)
			imageProcessorItemProvider.dispose();
		if (genericAquariumItemProvider != null)
			genericAquariumItemProvider.dispose();
		if (cameraObjectItemProvider != null)
			cameraObjectItemProvider.dispose();
		if (analyzedAnimalItemProvider != null)
			analyzedAnimalItemProvider.dispose();
		if (fishItemProvider != null)
			fishItemProvider.dispose();
		if (cv_ControllerItemProvider != null)
			cv_ControllerItemProvider.dispose();
		if (outputBuilderItemProvider != null)
			outputBuilderItemProvider.dispose();
	}

}
